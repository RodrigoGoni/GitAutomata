(*
 *
 * File: untitled.exp
 *
 * IEC 61131-3 Structured Text (ST) code generated for subsystem "untitled/Fuzzy Logic 
Controller"
 *
 * Model name                      : untitled
 * Model version                   : 1.0
 * Model creator                   : GoniR
 * Model last modified by          : The MathWorks, Inc.
 * Model last modified on          : Wed Jul 29 20:08:32 2020
 * Model sample time               : 0s
 * Subsystem name                  : untitled/Fuzzy Logic 
Controller
 * Subsystem sample time           : 0.2s
 * Simulink PLC Coder version      : 3.3 (R2020b) 29-Jul-2020
 * ST code generated on            : Sat Feb 19 14:39:31 2022
 *
 * Target IDE selection            : 3S CoDeSys 2.3
 * Test Bench included             : No
 *
 *)
FUNCTION_BLOCK Fuzzy0
VAR_INPUT
    in: ARRAY [0..1] OF LREAL;
END_VAR
VAR_OUTPUT
    out: LREAL;
END_VAR
VAR
    OutputSamplePoints_Value: ARRAY [0..100] OF LREAL := 0.5,0.505,0.51,0.515,0.52,0.525,0.53,0.535,0.54,0.545,0.55,
        0.555,0.56,0.565,0.57000000000000006,0.575,0.58,0.585,0.59,0.595,0.6,0.605,0.61,0.615,0.62,0.625,0.63,0.635,
        0.64,0.645,0.65,0.655,0.66,0.665,0.67,0.675,0.67999999999999994,0.685,0.69,0.69500000000000006,0.7,0.705,
        0.71,0.715,0.72,0.725,0.73,0.735,0.74,0.745,0.75,0.755,0.76,0.765,0.77,0.775,0.78,0.78499999999999992,0.79,
        0.79499999999999993,0.8,0.80499999999999994,0.81,0.815,0.82000000000000006,0.825,0.83000000000000007,0.835,
        0.84000000000000008,0.845,0.85,0.855,0.86,0.865,0.87,0.875,0.88,0.885,0.89,0.895,0.9,0.905,
        0.90999999999999992,0.915,0.91999999999999993,0.925,0.92999999999999994,0.935,0.94,0.94500000000000006,0.95,
        0.95500000000000007,0.96,0.96500000000000008,0.97,0.975,0.98,0.985,0.99,0.995,1.0;
    h: ARRAY [0..2] OF LREAL := -0.09,-0.06,-0.02;
    g: ARRAY [0..2] OF LREAL := -0.041,-0.02,-0.001;
    f: ARRAY [0..2] OF LREAL := 0.001,0.02,0.041;
    e: ARRAY [0..2] OF LREAL := 0.02,0.06,0.09;
    b_d: ARRAY [0..2] OF LREAL := -0.1,-0.05,-0.00125;
    c: ARRAY [0..2] OF LREAL := 0.00125,0.05,0.1;
    b: ARRAY [0..29] OF SINT := 1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3;
    b_c: ARRAY [0..2] OF LREAL := 0.375,0.5,0.6437;
    c_d: ARRAY [0..2] OF LREAL := 0.5333,0.6437,0.75;
    b_e: ARRAY [0..2] OF LREAL := 0.6437,0.75,0.8587;
    b_f: ARRAY [0..2] OF LREAL := 0.75,0.8587,0.9667;
    b_g: ARRAY [0..2] OF LREAL := 0.8587,1.0,1.127;
    b_b: ARRAY [0..14] OF SINT := 1,2,3,4,5,3,4,5,4,3,5,4,3,2,1;
    i0_trimf_a: trimf_a;
END_VAR
VAR_TEMP
    inputMFCache: ARRAY [0..7] OF LREAL;
    ruleID: DINT;
    inputID: DINT;
    mfVal: LREAL;
    outputMFCache: ARRAY [0..504] OF LREAL;
    rtb_defuzzifiedOutputs: LREAL;
    rtb_antecedentOutputs: ARRAY [0..14] OF LREAL;
    rtb_aggregatedOutputs: ARRAY [0..100] OF LREAL;
    tmp: ARRAY [0..2] OF LREAL;
    tmp_0: ARRAY [0..100] OF LREAL;
    tmp_1: ARRAY [0..100] OF LREAL;
    tmp_2: ARRAY [0..100] OF LREAL;
    tmp_3: ARRAY [0..100] OF LREAL;
    tmp_4: ARRAY [0..100] OF LREAL;
    x_idx_1: LREAL;
    rtb_antecedentOutputs_n: LREAL;
END_VAR
(* Outputs for Atomic SubSystem: '<Root>/Fuzzy Logic  Controller' *)
(* MATLAB Function: '<S1>/Evaluate Rule Antecedents' *)
(* MATLAB Function 'Evaluate Rule Antecedents': '<S3>:1' *)
(* '<S3>:1:4' if SimulateUsing==1 && coder.internal.canUseExtrinsic ... *)
(* '<S3>:1:5'         && (isa(inputs,'double') || isa(inputs,'single')) *)
(* '<S3>:1:32' else *)
(* '<S3>:1:33' if fis.inputFuzzySetType==1 *)
(* '<S3>:1:34' [antecedentOutputs,sumAntecedentOutputs] = ... *)
(* '<S3>:1:35'             fuzzy.internal.codegen.evaluateRuleAntecedent(... *)
(* '<S3>:1:36'             inputs,fis,diagnostics); *)
rtb_defuzzifiedOutputs := 0.0;
inputMFCache[0] := trimf(x := in[0], params := h);
inputMFCache[1] := trimf(x := in[0], params := g);
(* End of Outputs for SubSystem: '<Root>/Fuzzy Logic  Controller' *)
(* Outputs for Atomic SubSystem: '<Root>/Fuzzy Logic  Controller' *)
(* MATLAB Function: '<S1>/Evaluate Rule Antecedents' *)
tmp[0] := -0.021;
tmp[1] := 0.0;
tmp[2] := 0.021;
inputMFCache[2] := trimf(x := in[0], params := tmp);
inputMFCache[3] := trimf(x := in[0], params := f);
inputMFCache[4] := trimf(x := in[0], params := e);
inputMFCache[5] := trimf(x := in[1], params := b_d);
(* End of Outputs for SubSystem: '<Root>/Fuzzy Logic  Controller' *)
(* Outputs for Atomic SubSystem: '<Root>/Fuzzy Logic  Controller' *)
(* MATLAB Function: '<S1>/Evaluate Rule Antecedents' *)
tmp[0] := -0.03123;
tmp[1] := 0.0;
tmp[2] := 0.03123;
inputMFCache[6] := trimf(x := in[1], params := tmp);
inputMFCache[7] := trimf(x := in[1], params := c);
(* End of Outputs for SubSystem: '<Root>/Fuzzy Logic  Controller' *)
(* Outputs for Atomic SubSystem: '<Root>/Fuzzy Logic  Controller' *)
(* MATLAB Function: '<S1>/Evaluate Rule Antecedents' *)
FOR ruleID := 0 TO 14 DO 
    x_idx_1 := inputMFCache[SINT_TO_DINT(b[ruleID]) - 1];
    IF 1.0 > x_idx_1 THEN 
        rtb_antecedentOutputs_n := x_idx_1;
    ELSE 
        rtb_antecedentOutputs_n := 1.0;
    END_IF;
    x_idx_1 := inputMFCache[SINT_TO_DINT(b[ruleID + 15]) + 4];
    IF rtb_antecedentOutputs_n > x_idx_1 THEN 
        rtb_antecedentOutputs_n := x_idx_1;
    END_IF;
    rtb_defuzzifiedOutputs := rtb_defuzzifiedOutputs + rtb_antecedentOutputs_n;
    rtb_antecedentOutputs[ruleID] := rtb_antecedentOutputs_n;
END_FOR;
(* MATLAB Function: '<S1>/Evaluate Rule Consequents' incorporates:
 *  Constant: '<S1>/Output Sample Points' *)
(* MATLAB Function 'Evaluate Rule Consequents': '<S4>:1' *)
(* '<S4>:1:4' if SimulateUsing==1 && coder.internal.canUseExtrinsic ... *)
(* '<S4>:1:5'         && (isa(inputs,'double') || isa(inputs,'single')) *)
(* '<S4>:1:55' else *)
(* '<S4>:1:56' if fis.inputFuzzySetType==1 *)
(* '<S4>:1:57' if strcmp(char(fis.type),'mamdani') *)
(* '<S4>:1:58' aggregatedOutputs = ... *)
(* '<S4>:1:59'                 fuzzy.internal.codegen.evaluateRuleConsequentForMamdaniFIS(... *)
(* '<S4>:1:60'                 antecedentOutputs,fis,samplePoints); *)
i0_trimf_a(x := OutputSamplePoints_Value, params := b_c);
tmp_0 := i0_trimf_a.y;
i0_trimf_a(x := OutputSamplePoints_Value, params := c_d);
tmp_1 := i0_trimf_a.y;
i0_trimf_a(x := OutputSamplePoints_Value, params := b_e);
tmp_2 := i0_trimf_a.y;
i0_trimf_a(x := OutputSamplePoints_Value, params := b_f);
tmp_3 := i0_trimf_a.y;
i0_trimf_a(x := OutputSamplePoints_Value, params := b_g);
tmp_4 := i0_trimf_a.y;
(* End of Outputs for SubSystem: '<Root>/Fuzzy Logic  Controller' *)
(* Outputs for Atomic SubSystem: '<Root>/Fuzzy Logic  Controller' *)
(* MATLAB Function: '<S1>/Evaluate Rule Consequents' *)
FOR ruleID := 0 TO 100 DO 
    rtb_aggregatedOutputs[ruleID] := 0.0;
    outputMFCache[5 * ruleID] := tmp_0[ruleID];
    outputMFCache[(5 * ruleID) + 1] := tmp_1[ruleID];
    outputMFCache[(5 * ruleID) + 2] := tmp_2[ruleID];
    outputMFCache[(5 * ruleID) + 3] := tmp_3[ruleID];
    outputMFCache[(5 * ruleID) + 4] := tmp_4[ruleID];
END_FOR;
FOR ruleID := 0 TO 14 DO 
    x_idx_1 := rtb_antecedentOutputs[ruleID];
    FOR inputID := 0 TO 100 DO 
        rtb_antecedentOutputs_n := rtb_aggregatedOutputs[inputID];
        mfVal := outputMFCache[((5 * inputID) + SINT_TO_DINT(b_b[ruleID])) - 1];
        IF mfVal > x_idx_1 THEN 
            mfVal := x_idx_1;
        END_IF;
        IF rtb_antecedentOutputs_n < mfVal THEN 
            rtb_antecedentOutputs_n := mfVal;
        END_IF;
        rtb_aggregatedOutputs[inputID] := rtb_antecedentOutputs_n;
    END_FOR;
END_FOR;
(* MATLAB Function: '<S1>/Defuzzify Outputs' incorporates:
 *  Constant: '<S1>/Output Sample Points'
 *  MATLAB Function: '<S1>/Evaluate Rule Antecedents' *)
(* MATLAB Function 'Defuzzify Outputs': '<S2>:1' *)
(* '<S2>:1:4' if SimulateUsing==1 && coder.internal.canUseExtrinsic ... *)
(* '<S2>:1:5'         && (isa(aggregatedOutputs,'double') || isa(aggregatedOutputs,'single')) *)
(* '<S2>:1:63' else *)
(* '<S2>:1:64' if fis.inputFuzzySetType==1 *)
(* '<S2>:1:65' if isequal(fis.type,uint8('mamdani')) *)
(* '<S2>:1:66' defuzzifiedOutputs = ... *)
(* '<S2>:1:67'                 fuzzy.internal.codegen.applyMamdaniDefuzzificationMethod(... *)
(* '<S2>:1:68'                 samplePoints,sumAntecedentOutputs,aggregatedOutputs, ... *)
(* '<S2>:1:69'                 fis,diagnostics); *)
IF rtb_defuzzifiedOutputs = 0.0 THEN 
    (* Outport: '<Root>/out' *)
    out := 0.75;
ELSE 
    rtb_defuzzifiedOutputs := 0.0;
    mfVal := 0.0;
    FOR ruleID := 0 TO 100 DO 
        mfVal := mfVal + rtb_aggregatedOutputs[ruleID];
    END_FOR;
    IF mfVal = 0.0 THEN 
        (* Outport: '<Root>/out' *)
        out := 0.75;
    ELSE 
        FOR ruleID := 0 TO 100 DO 
            rtb_defuzzifiedOutputs := (OutputSamplePoints_Value[ruleID] * rtb_aggregatedOutputs[ruleID]) + rtb_defuzzifiedOutputs;
        END_FOR;
        (* Outport: '<Root>/out' incorporates:
         *  Constant: '<S1>/Output Sample Points' *)
        out := (1.0 / mfVal) * rtb_defuzzifiedOutputs;
    END_IF;
END_IF;
(* End of MATLAB Function: '<S1>/Defuzzify Outputs' *)
(* End of Outputs for SubSystem: '<Root>/Fuzzy Logic  Controller' *)
END_FUNCTION_BLOCK
FUNCTION trimf: LREAL
VAR_INPUT
    x: LREAL;
    params: ARRAY [0..2] OF LREAL;
END_VAR
trimf := 0.0;
IF params[0] <> params[1] THEN 
    IF params[0] < x THEN 
        IF x < params[1] THEN 
            trimf := (1.0 / (params[1] - params[0])) * (x - params[0]);
        END_IF;
    END_IF;
END_IF;
IF params[1] <> params[2] THEN 
    IF params[1] < x THEN 
        IF x < params[2] THEN 
            trimf := (1.0 / (params[2] - params[1])) * (params[2] - x);
        END_IF;
    END_IF;
END_IF;
IF x = params[1] THEN 
    trimf := 1.0;
END_IF;
END_FUNCTION
FUNCTION_BLOCK trimf_a
VAR_INPUT
    x: ARRAY [0..100] OF LREAL;
    params: ARRAY [0..2] OF LREAL;
END_VAR
VAR_OUTPUT
    y: ARRAY [0..100] OF LREAL;
END_VAR
VAR_TEMP
    a: LREAL;
    b: LREAL;
    c: LREAL;
    i: DINT;
    x_0: LREAL;
END_VAR
a := params[0];
b := params[1];
c := params[2];
FOR i := 0 TO 100 DO 
    x_0 := x[i];
    y[i] := 0.0;
    IF a <> b THEN 
        IF a < x_0 THEN 
            IF x_0 < b THEN 
                y[i] := (1.0 / (b - a)) * (x_0 - a);
            END_IF;
        END_IF;
    END_IF;
    IF b <> c THEN 
        IF b < x_0 THEN 
            IF x_0 < c THEN 
                y[i] := (1.0 / (c - b)) * (c - x_0);
            END_IF;
        END_IF;
    END_IF;
    IF x_0 = b THEN 
        y[i] := 1.0;
    END_IF;
END_FOR;
END_FUNCTION_BLOCK
